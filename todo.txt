Soon:

Support interfaces.

Basic Query and Mutation classes.

Only wrap Query::Base subclasses that are connections.

Figure out where custom query logic (like full-text search) should live.





Pagination:

Support counts on connections. Should respect arguments, and just return
counter caches when available and appropriate (no arguments). How should
counts change when paginating?

Move seek pagination invocation out of DatasetResolver, probably?





Future association work:

Support associated :through, to allow GraphQL queries that skip the
intermediate associations. Should merge into other parts of the query that
query the intermediate association.

Figure out how/whether to optimize to reciprocal associations.

If no columns are requested at an association level (will commonly be the case
when accessing :through associations), try to push that down to the DB as a
join. Maybe do that sometimes when columns are requested anyway.

Set associated objects in Sequel object association caches when possible? Only when we're sure they're complete.





Future miscellaneous stuff:

Make interface a module that Prelay::Type subclasses can include?

Always tack on the pk when sorting.

Make sure it works to have fields named 'cursor'.

Clean up that hacky deep copying logic in RelayProcessor.

Find another way to do that whole typed/untyped Selection thing.

Figure out how to handle records that don't exist in the 'nodes' query (should return null in the JSON) (maybe requires opening issue with graphql-ruby).

Support types based on arbitrary datasets, no model necessary?

Use qualified columns everywhere (?).

Support deprecation warnings on fields (and whole objects?).

Freeze schema contents when they're generated.

Support some configurable way to reject queries that have the potential to
touch too many rows or generate queries of too severe complexity.

Give attributes dataset dependencies? Of which dependent_columns would just be
a special case?

Permissions: visibility both for whole rows and individual fields within rows.
May often need to modify queries to retrieve information to determine
visibility.

Add more checks that arguments are present and the right types.

Delete arguments as they're used, make sure there are none left at the end.

Plural identifying root fields:
https://facebook.github.io/relay/graphql/objectidentification.htm#sec-Plural-identifying-root-fields

Instrumentation?

Spec/support multiple invocations of the same field with different arguments.

Performance testing/benchmarks.
